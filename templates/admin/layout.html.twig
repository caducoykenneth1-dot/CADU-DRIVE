{% extends 'base.html.twig' %}

{% block title %}{% if block('admin_title') is defined %}{{ block('admin_title') }}{% else %}Admin Panel{% endif %}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">
{% endblock %}

{% block body %}
    <div class="flex min-h-screen bg-gray-900 text-gray-200">
        <div id="admin-drawer-overlay" class="fixed inset-0 hidden bg-black/50 backdrop-blur-sm lg:hidden"></div>

        <aside id="admin-drawer" class="admin-drawer admin-drawer-closed fixed inset-y-0 left-0 z-40 flex w-64 flex-col overflow-y-auto border-r border-gray-800 bg-gray-900 py-10 shadow-lg lg:static lg:z-auto lg:h-auto lg:py-8 lg:shadow-none">
            <div class="px-6 pb-4">
                <h2 class="text-lg font-semibold uppercase tracking-wide text-gray-400">Admin Menu</h2>
            </div>
            <nav class="flex-1 space-y-1 px-4 pb-6">
                <a href="#overview" data-section="overview" class="admin-nav-link is-active">
                    <span class="bi bi-speedometer2 text-base"></span>
                    Dashboard
                </a>
                <a href="#customers" data-section="customers" class="admin-nav-link">
                    <span class="bi bi-people text-base"></span>
                    Customers
                </a>
                <a href="#fleet" data-section="fleet" class="admin-nav-link">
                    <span class="bi bi-car-front text-base"></span>
                    Cars
                </a>
                <a href="#rentals" data-section="rentals" class="admin-nav-link">
                    <span class="bi bi-calendar-check text-base"></span>
                    Rentals
                </a>
                <a href="#tasks" class="admin-nav-link is-disabled" aria-disabled="true">
                    <span class="bi bi-gear text-base"></span>
                    Settings (coming soon)
                </a>
            </nav>
        </aside>

        <div class="flex flex-1 flex-col">
            <header class="flex items-center justify-between border-b border-gray-800 bg-gray-900/70 px-6 py-4 lg:hidden">
                <button id="admin-drawer-open" class="inline-flex items-center rounded-md border border-gray-700 px-3 py-2 text-sm font-medium text-gray-200 transition hover:bg-gray-800">
                    <span class="bi bi-list mr-2 text-lg"></span>
                    Menu
                </button>
                <span class="text-sm font-medium text-gray-400">Admin Panel</span>
                <span></span>
            </header>

            <main class="flex-1 bg-gray-900 px-6 py-8">
                {% block admin_content %}{% endblock %}
            </main>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        (function () {
            const drawer = document.getElementById('admin-drawer');
            const overlay = document.getElementById('admin-drawer-overlay');
            const openBtn = document.getElementById('admin-drawer-open');
            let closeMobileDrawer = null;

            if (!drawer || !overlay || !openBtn) {
                return;
            }

            const closeDrawer = () => {
                drawer.classList.add('admin-drawer-closed');
                overlay.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            };

            const openDrawer = () => {
                drawer.classList.remove('admin-drawer-closed');
                overlay.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            };

            closeMobileDrawer = closeDrawer;

            openBtn.addEventListener('click', openDrawer);
            overlay.addEventListener('click', closeDrawer);

            const sectionLinks = Array.from(drawer.querySelectorAll('[data-section]'));
            const sections = Array.from(document.querySelectorAll('[data-dashboard-section]'));

            const activateLink = (id) => {
                sectionLinks.forEach((link) => {
                    if (link.dataset.section === id) {
                        link.classList.add('is-active');
                    } else {
                        link.classList.remove('is-active');
                    }
                });
            };

            sectionLinks.forEach((link) => {
                link.addEventListener('click', (event) => {
                    const targetId = link.dataset.section;
                    const targetSection = document.getElementById(targetId);
                    if (!targetSection) {
                        return;
                    }

                    event.preventDefault();
                    if (typeof closeMobileDrawer === 'function') {
                        closeMobileDrawer();
                    }
                    targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    activateLink(targetId);
                });
            });

            if ('IntersectionObserver' in window && sections.length > 0) {
                const observer = new IntersectionObserver(
                    (entries) => {
                        const visible = entries
                            .filter((entry) => entry.isIntersecting)
                            .sort((a, b) => b.intersectionRatio - a.intersectionRatio)[0];

                        if (visible) {
                            activateLink(visible.target.id);
                        }
                    },
                    {
                        rootMargin: '-45% 0px -45% 0px',
                        threshold: [0.1, 0.35, 0.6],
                    }
                );

                sections.forEach((section) => observer.observe(section));
            }

            if (sectionLinks.length > 0) {
                const firstSection = sectionLinks[0].dataset.section;
                if (firstSection) {
                    activateLink(firstSection);
                }
            }
        }());
    </script>
{% endblock %}
